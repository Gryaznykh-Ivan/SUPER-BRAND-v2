/* eslint-disable react/no-unescaped-entities */
import Head from 'next/head'
import { useEffect } from 'react'
import { toast } from 'react-toastify'
import BotAction from '../components/bot/BotAction'
import BotStatus from '../components/bot/BotStatus'
import MainLayout from '../components/layouts/Main'
import { useAppSelector } from '../hooks/store'
import { useGetBotByIdQuery, useBotStartMutation, useBotCompleteMutation } from '../services/botService'
import { IErrorResponse } from '../types/api'


export default function Index() {
    const auth = useAppSelector(state => state.auth)
    const { data } = useGetBotByIdQuery({ botId: process.env.NEXT_PUBLIC_BOT_ID as string }, { pollingInterval: 5000 })

    const [botStart, { isSuccess: isBotStartSuccess, isError: isBotStartError, error: botStartError }] = useBotStartMutation();
    const [botComplete, { isSuccess: isBotCompleteSuccess, isError: isBotCompleteError, error: botCompleteError }] = useBotCompleteMutation();

    useEffect(() => {
        if (isBotStartSuccess) {
            setTimeout(() => toast.success("Парсер запущен"), 100)
        }

        if (isBotStartError) {
            if (botStartError && "status" in botStartError) {
                toast.error((botStartError.data as IErrorResponse)?.message)
            } else {
                toast.error("Произошла неизвесная ошибка")
            }
        }
    }, [isBotStartSuccess, isBotStartError])

    useEffect(() => {
        if (isBotCompleteSuccess) {
            setTimeout(() => toast.success("Парсер запущен"), 100)
        }

        if (isBotCompleteError) {
            if (botCompleteError && "status" in botCompleteError) {
                toast.error((botCompleteError.data as IErrorResponse)?.message)
            } else {
                toast.error("Произошла неизвесная ошибка")
            }
        }
    }, [isBotCompleteSuccess, isBotCompleteError])

    const onBotStart = () => {
        if (data?.data.status === "ACTIVE") {
            return toast.error("Робот еще работает. Принудительный запуск недоступен")
        }

        botStart()
    }

    const onBotComplete = () => {
        if (data?.data.status === "ACTIVE") {
            return toast.error("Робот еще работает. Принудительный запуск невозможен")
        }

        botComplete()
    }

    return (
        <MainLayout>
            <Head>
                <title>Главная</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="px-6 my-4 max-w-3xl mx-auto space-y-4">
                <div className="text-xl font-medium">Парсер</div>
                <div className="">Состояние робота:</div>
                <div className="flex flex-col divide-y-[1px] divide-gray-300 bg-white p-4 rounded-lg md:flex-row md:divide-x-[1px] md:divide-y-0">
                    <div className="flex-1 flex justify-center items-center py-2 px-1">
                        <div className="text-lg font-medium text-center">
                            {data?.data.status ? <BotStatus status={data.data.status} /> : "..."}
                        </div>
                    </div>
                    <div className="flex-1 flex justify-center items-center py-2 px-1">
                        <div className="text-lg font-medium text-center">
                            {data?.data.action ? <BotAction action={data.data.action} /> : "..."}
                        </div>
                    </div>
                </div>
                {auth.isAuth &&
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <button className="px-4 py-2 bg-green-600 rounded text-white hover:font-medium" onClick={onBotStart}>Запустить</button>
                        <button className="px-4 py-2 bg-gray-300 border-[1px] rounded text-black hover:font-medium" onClick={onBotComplete}>Запустить очередь</button>
                    </div>
                }
            </div>
        </MainLayout>
    )
}

/* eslint-disable react-hooks/exhaustive-deps */
import Head from 'next/head'
import { useEffect, useMemo, useState } from 'react'
import { toast } from 'react-toastify'
import MainLayout from '../components/layouts/Main'
import { useAppSelector } from '../hooks/store'
import { useGetSettingsByIdQuery, useUpdateSettingsMutation } from '../services/settingsService'
import { IErrorResponse } from '../types/api'

export default function Settings() {
    const { data } = useGetSettingsByIdQuery({ settingId: process.env.NEXT_PUBLIC_BOT_ID as string })
    const [updateSettings, { isSuccess, isError, error }] = useUpdateSettingsMutation()

    const [state, setState] = useState({
        proxy: data?.data.proxy ?? "",
        rate: data?.data.rate ?? "",
        upTo135: data?.data.upTo135 ?? "",
        upTo200: data?.data.upTo200 ?? "",
        upTo266: data?.data.upTo266 ?? "",
        upTo333: data?.data.upTo333 ?? "",
        upTo400: data?.data.upTo400 ?? "",
        upTo466: data?.data.upTo466 ?? "",
        upTo533: data?.data.upTo533 ?? "",
        upTo600: data?.data.upTo600 ?? "",
        upTo666: data?.data.upTo666 ?? "",
        over666: data?.data.over666 ?? "",
    })

    useEffect(() => {
        setState({
            proxy: data?.data.proxy ?? "",
            rate: data?.data.rate ?? "",
            upTo135: data?.data.upTo135 ?? "",
            upTo200: data?.data.upTo200 ?? "",
            upTo266: data?.data.upTo266 ?? "",
            upTo333: data?.data.upTo333 ?? "",
            upTo400: data?.data.upTo400 ?? "",
            upTo466: data?.data.upTo466 ?? "",
            upTo533: data?.data.upTo533 ?? "",
            upTo600: data?.data.upTo600 ?? "",
            upTo666: data?.data.upTo666 ?? "",
            over666: data?.data.over666 ?? "",
        })
    }, [data])

    useEffect(() => {
        if (isSuccess) {
            setTimeout(() => toast.success("Настройки обновлены"), 100)
        }

        if (isError) {
            if (error && "status" in error) {
                toast.error((error.data as IErrorResponse)?.message)
            } else {
                toast.error("Произошла неизвесная ошибка")
            }
        }
    }, [isSuccess, isError])

    const mustBeSaved = useMemo(() => {
        if (data === undefined) return false

        for (const item of Object.entries(state)) {
            if (data.data[item[0] as keyof typeof data.data] !== item[1]) {
                return true
            }
        }
    }, [state, data])

    const onInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        setState(prev => ({ ...prev, [e.target.name]: e.target.value.replaceAll(",", ".") }))
    }

    const onRateChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const input = e.target.value.replace(/[^0-9.]/g, "");
        const parts = input.split(".");
        let newValue = input;
        if (parts.length === 2) {
            const [integer, decimal] = parts;
            if (decimal.length > 2) {
                newValue = `${integer}.${decimal.slice(0, 2)}`;
            }
        }
        setState(prev => ({ ...prev, [e.target.name]: newValue }));
    };

    const onSaveChanges = () => {
        updateSettings({ settingId: process.env.NEXT_PUBLIC_BOT_ID as string, ...state })
    }


    return (
        <MainLayout>
            <Head>
                <title>Настройки</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="px-6 my-4 max-w-3xl mx-auto space-y-4">
                <div className="text-xl font-medium">Настройки</div>
                <div className="flex flex-col">
                    <label className="text-sm mb-2">Курс доллара</label>
                    <input type="string" className="bg-white rounded-md border-gray-300 shadow-sm text-sm px-3 py-2 border-[1px]" name="rate" value={state.rate} onChange={onRateChange} />
                </div>
                <div className="flex flex-col">
                    <label className="text-sm mb-2">Прокси (Формат: login:password@host:port)</label>
                    <textarea className="bg-white rounded-md border-gray-300 shadow-sm text-md" rows={5} name="proxy" value={state.proxy} onChange={onInputChange} />
                </div>
                <div className="flex flex-col">
                    <div className="text-sm mb-4">Настройка формул</div>
                    <div className="grid grid-cols-3 gap-5">
                        <div className="flex flex-col">
                            <label className="text-sm mb-1">До 135$</label>
                            <input type="string" className="bg-white rounded-md border-gray-300 shadow-sm text-sm px-3 py-2 border-[1px]" name="upTo135" value={state.upTo135} onChange={onInputChange} />
                        </div>
                        <div className="flex flex-col">
                            <label className="text-sm mb-1">До 200$</label>
                            <input type="string" className="bg-white rounded-md border-gray-300 shadow-sm text-sm px-3 py-2 border-[1px]" name="upTo200" value={state.upTo200} onChange={onInputChange} />
                        </div>
                        <div className="flex flex-col">
                            <label className="text-sm mb-1">До 266$</label>
                            <input type="string" className="bg-white rounded-md border-gray-300 shadow-sm text-sm px-3 py-2 border-[1px]" name="upTo266" value={state.upTo266} onChange={onInputChange} />
                        </div>
                        <div className="flex flex-col">
                            <label className="text-sm mb-1">До 333$</label>
                            <input type="string" className="bg-white rounded-md border-gray-300 shadow-sm text-sm px-3 py-2 border-[1px]" name="upTo333" value={state.upTo333} onChange={onInputChange} />
                        </div>
                        <div className="flex flex-col">
                            <label className="text-sm mb-1">До 400$</label>
                            <input type="string" className="bg-white rounded-md border-gray-300 shadow-sm text-sm px-3 py-2 border-[1px]" name="upTo400" value={state.upTo400} onChange={onInputChange} />
                        </div>
                        <div className="flex flex-col">
                            <label className="text-sm mb-1">До 466$</label>
                            <input type="string" className="bg-white rounded-md border-gray-300 shadow-sm text-sm px-3 py-2 border-[1px]" name="upTo466" value={state.upTo466} onChange={onInputChange} />
                        </div>
                        <div className="flex flex-col">
                            <label className="text-sm mb-1">До 533$</label>
                            <input type="string" className="bg-white rounded-md border-gray-300 shadow-sm text-sm px-3 py-2 border-[1px]" name="upTo533" value={state.upTo533} onChange={onInputChange} />
                        </div>
                        <div className="flex flex-col">
                            <label className="text-sm mb-1">До 600$</label>
                            <input type="string" className="bg-white rounded-md border-gray-300 shadow-sm text-sm px-3 py-2 border-[1px]" name="upTo600" value={state.upTo600} onChange={onInputChange} />
                        </div>
                        <div className="flex flex-col">
                            <label className="text-sm mb-1">До 666$</label>
                            <input type="string" className="bg-white rounded-md border-gray-300 shadow-sm text-sm px-3 py-2 border-[1px]" name="upTo666" value={state.upTo666} onChange={onInputChange} />
                        </div>
                        <div className="flex flex-col col-span-3">
                            <label className="text-sm mb-1">Более 666$</label>
                            <input type="string" className="bg-white rounded-md border-gray-300 shadow-sm text-sm px-3 py-2 border-[1px]" name="over666" value={state.over666} onChange={onInputChange} />
                        </div>
                    </div>
                </div>
                {mustBeSaved &&
                    <div className="flex">
                        <button className="flex-1 bg-green-600 mt-4 py-2 text-white rounded" onClick={onSaveChanges}>Сохранить</button>
                    </div>
                }
            </div>
        </MainLayout>
    )
}

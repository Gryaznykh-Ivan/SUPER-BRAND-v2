generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex", "filteredRelationCount", "interactiveTransactions"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    MANAGER
    GUEST
    CUSTOMER
}

enum Right {
    ORDER_CREATE
    ORDER_READ
    ORDER_UPDATE
    ORDER_DELETE
    PRODUCT_CREATE
    PRODUCT_READ
    PRODUCT_UPDATE
    PRODUCT_DELETE
    OFFER_CREATE
    OFFER_READ
    OFFER_UPDATE
    OFFER_DELETE
    COLLECTION_CREATE
    COLLECTION_READ
    COLLECTION_UPDATE
    COLLECTION_DELETE
    USER_CREATE
    USER_READ
    USER_UPDATE
    USER_DELETE
    SHIPPING_CREATE
    SHIPPING_READ
    SHIPPING_UPDATE
    SHIPPING_DELETE
    MEDIA_UPLOAD
    MEDIA_DELETE
}

enum OfferStatus {
    NO_MATCH
    OFFERED
    ACCEPTED
    DECLINED
    ACTIVE
    SOLD
    RETURNING
    RETURN_APPROVAL
}

enum Service {
    SHIPPING
    DISCOUNT
}

enum Currency {
    RUB
    USD
}

enum InvoiceType {
    PAYMENT
    REFUND
}

enum OrderStatus {
    FULFILLED
    PARTIALLY_FULFILLED
    UNFULFILLED
    CANCELED
}

enum ReturnStatus {
    RETURN_REQUESTED
    RETURN_IN_PROGRESS
    RETURNED
}

enum FulfillmentStatus {
    SENT
    DELIVERED
}

enum PaymentStatus {
    UNPAID
    PARTIALLY_PAID
    NEED_TO_RETURN
    REFUNDED
    PAID
}

enum InvoiceStatus {
    PENDING
    CANCELED
    SUCCEEDED
}

model setting {
    id        String   @id @default(cuid())
    setting   String
    title     String
    value     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([setting, title])
    @@map("setting")
}

model verificationcode {
    id        String   @id @default(cuid())
    email     String
    code      String
    createdAt DateTime @default(now())

    @@map("verificationcode")
}

model user {
    id                   String            @id @default(cuid())
    email                String?           @unique
    phone                String?
    firstName            String?
    lastName             String?
    fullName             String?
    inn                  String?
    account              String?
    correspondentAccount String?
    bic                  String?
    passport             String?
    comment              String?
    isVerified           Boolean           @default(false)
    isSubscribed         Boolean           @default(false)
    role                 Role              @default(GUEST)
    addresses            address[]
    orders               order[]
    favoriteProducts     favoriteproduct[]
    tokens               token[]
    cart                 cartproduct[]
    offers               offer[]
    permissions          permission[]
    timeline             timeline[]
    createdAt            DateTime          @default(now())
    updatedAt            DateTime          @updatedAt

    @@fulltext([fullName])
    @@fulltext([fullName, email, phone])
    @@map("user")
}

model permission {
    id        String   @id @default(cuid())
    right     Right
    user      user     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, right])
    @@map("permission")
}

model cartproduct {
    user      user     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    String
    offer     offer    @relation(fields: [offerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    offerId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, offerId])
    @@map("cartproduct")
}

model token {
    id           String   @id @default(cuid())
    user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId       String
    refreshToken String
    expiresIn    DateTime
    createdAt    DateTime @default(now())

    @@map("token")
}

model address {
    id        String   @id @default(cuid())
    country   String
    city      String
    address   String
    region    String
    user      user     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("address")
}

model order {
    id             Int            @id @default(autoincrement())
    orderStatus    OrderStatus    @default(UNFULFILLED)
    paymentStatus  PaymentStatus  @default(UNPAID)
    returnStatus   ReturnStatus?
    totalPrice     Decimal        @db.Decimal(9, 2)
    mailingCountry String
    mailingCity    String
    mailingRegion  String
    mailingAddress String
    note           String?
    invoices       invoice[]
    services       orderservice[]
    offers         offer[]        @relation(name: "orderoffers")
    fulfillments   fulfillment[]
    returns        orderreturn[]
    timeline       timeline[]
    removedOffers  offer[]        @relation(name: "orderremovedoffers")
    user           user           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId         String
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt

    @@map("order")
}

model invoice {
    id          String        @id @default(cuid())
    invoiceType InvoiceType   @default(PAYMENT)
    status      InvoiceStatus @default(PENDING)
    method      String
    amount      Decimal       @db.Decimal(9, 2)
    currency    Currency      @default(RUB)
    order       order         @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    orderId     Int
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    @@map("invoice")
}

model orderservice {
    id          String  @id @default(cuid())
    type        Service @default(SHIPPING)
    description String? @db.Text
    price       Decimal @db.Decimal(9, 2)
    order       order   @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    orderId     Int

    @@map("orderservice")
}

model timeline {
    id        String   @id @default(cuid())
    title     String   @db.VarChar(255)
    message   String?  @db.Text
    order     order    @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    orderId   Int
    user      user?    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    userId    String?
    createdAt DateTime @default(now())

    @@map("timeline")
}

model fulfillment {
    id        String            @id @default(cuid())
    status    FulfillmentStatus @default(SENT)
    tracking  String?
    carrier   String?
    offers    offer[]
    order     order             @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    orderId   Int
    createdAt DateTime          @default(now())
    updatedAt DateTime          @updatedAt

    @@map("fulfillment")
}

model orderreturn {
    id        String        @id @default(cuid())
    status    ReturnStatus  @default(RETURN_REQUESTED)
    tracking  String?
    carrier   String?
    offers    returnoffer[]
    order     order         @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    orderId   Int
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    @@map("orderreturn")
}

model returnoffer {
    return    orderreturn   @relation(fields: [returnId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    returnId  String
    offer     offer    @relation(fields: [offerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    offerId   String
    reason    String
    createdAt DateTime @default(now())

    @@id([returnId, offerId])
    @@map("returnoffer")
}

model offer {
    id                String           @id @default(cuid())
    productTitle      String           @db.VarChar(255)
    variantTitle      String
    image             image?
    price             Decimal          @db.Decimal(9, 2)
    offerPrice        Decimal          @db.Decimal(9, 2)
    compareAtPrice    Decimal?         @db.Decimal(9, 2)
    comment           String?
    tag               String?
    status            OfferStatus      @default(OFFERED)
    user              user?            @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId            String?
    order             order?           @relation(name: "orderoffers", fields: [orderId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    orderId           Int?
    variant           variant?         @relation(fields: [variantId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    variantId         String?
    deliveryProfile   deliveryprofile? @relation(fields: [deliveryProfileId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    deliveryProfileId String?
    fulfillment       fulfillment?     @relation(fields: [fulfillmentId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    fulfillmentId     String?
    cartProduct       cartproduct[]
    returned          returnoffer[]
    removedFromOrders order[]          @relation(name: "orderremovedoffers")
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt

    @@fulltext([productTitle])
    @@map("offer")
}

model favoriteproduct {
    product   product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId String
    user      user     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([productId, userId])
    @@map("favoriteproduct")
}

model collection {
    id              String    @id @default(cuid())
    title           String    @db.VarChar(255)
    description     String?   @db.Text
    metaTitle       String?   @db.VarChar(255)
    metaDescription String?   @db.Text
    handle          String    @unique() @db.VarChar(255)
    products        product[] @relation(name: "collectiontoproduct")
    images          image[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    @@fulltext([title])
    @@map("collection")
}

model product {
    id               String            @id @default(cuid())
    handle           String            @unique() @db.VarChar(255)
    title            String            @db.VarChar(255)
    available        Boolean           @default(false)
    SKU              String?
    barcode          String?
    vendor           String?
    description      String?           @db.Text
    metaTitle        String?           @db.VarChar(255)
    metaDescription  String?           @db.Text
    images           image[]
    collections      collection[]      @relation(name: "collectiontoproduct")
    variants         variant[]
    productIsFavored favoriteproduct[]
    options          option[]
    metafields       metafield[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt

    @@fulltext([title])
    @@fulltext([vendor])
    @@fulltext([title, vendor])
    @@map("product")
}

model metafield {
    id        String  @id @default(cuid())
    key       String
    value     String
    product   product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId String

    @@unique([productId, key])
    @@map("metafield")
}

model option {
    id        String        @id @default(cuid())
    title     String
    option    Int
    position  Int
    values    optionvalue[]
    product   product       @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId String
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    @@unique([productId, title])
    @@map("option")
}

model optionvalue {
    id        String   @id @default(cuid())
    title     String
    position  Int
    option    option   @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([optionId, title])
    @@map("optionvalue")
}

model image {
    id           String      @id @default(cuid())
    path         String
    src          String
    alt          String
    blurhash     String
    position     Int
    product      product?    @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    productId    String?
    collection   collection? @relation(fields: [collectionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    collectionId String?
    variant      variant?    @relation(fields: [variantId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    variantId    String?
    offer        offer?      @relation(fields: [offerId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    offerId      String?     @unique
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    @@map("image")
}

model variant {
    id        String   @id @default(cuid())
    SKU       String?
    barcode   String?
    option0   String?
    option1   String?
    option2   String?
    product   product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId String
    images    image[]
    offers    offer[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("variant")
}

model deliveryprofile {
    id        String         @id @default(cuid())
    title     String         @unique
    offers    offer[]
    zones     deliveryzone[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt

    @@map("deliveryprofile")
}

model deliveryzone {
    id                String           @id @default(cuid())
    country           String
    region            String
    options           deliveryoption[]
    deliveryProfile   deliveryprofile  @relation(fields: [deliveryProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    deliveryProfileId String
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt

    @@unique([deliveryProfileId, country, region])
    @@fulltext([country, region])
    @@map("deliveryzone")
}

model deliveryoption {
    id             String       @id @default(cuid())
    title          String
    duration       Int
    price          Decimal      @db.Decimal(9, 2)
    deliveryZone   deliveryzone @relation(fields: [deliveryZoneId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    deliveryZoneId String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@map("deliveryoption")
}

model country {
    id        String   @id @default(cuid())
    title     String   @unique
    regions   region[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@fulltext([title])
    @@map("country")
}

model region {
    id        String   @id @default(cuid())
    title     String
    cities    city[]
    country   country  @relation(fields: [countryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    countryId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([countryId, title])
    @@fulltext([title])
    @@map("region")
}

model city {
    id        String   @id @default(cuid())
    title     String
    region    region   @relation(fields: [regionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    regionId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([regionId, title])
    @@fulltext([title])
    @@map("city")
}

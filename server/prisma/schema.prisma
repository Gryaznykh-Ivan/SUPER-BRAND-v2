generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "fullTextIndex", "filteredRelationCount", "interactiveTransactions"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    MANAGER
    GUEST
    CUSTOMER
}

enum Right {
    ORDER_CREATE
    ORDER_READ
    ORDER_UPDATE
    ORDER_DELETE
    PRODUCT_CREATE
    PRODUCT_READ
    PRODUCT_UPDATE
    PRODUCT_DELETE
    OFFER_CREATE
    OFFER_READ
    OFFER_UPDATE
    OFFER_DELETE
    COLLECTION_CREATE
    COLLECTION_READ
    COLLECTION_UPDATE
    COLLECTION_DELETE
    USER_CREATE
    USER_READ
    USER_UPDATE
    USER_DELETE
    SHIPPING_CREATE
    SHIPPING_READ
    SHIPPING_UPDATE
    SHIPPING_DELETE
    MEDIA_UPLOAD
    MEDIA_DELETE
}

enum OfferStatus {
    OFFERED
    ACCEPTED
    DECLINED
    ACTIVE
    SOLD
}

enum OrderStatus {
    FULFILLED
    UNFULFILLED
}

enum FulfillmentStatus {
    FULFILLED
    UNFULFILLED
}

enum PaymentStatus {
    UNPAID
    PARTIALLY_PAID
    NEED_TO_RETURN
    REFUNDED
    PAID
}

model VerificationCode {
    id        String   @id @default(cuid())
    email     String
    code      String
    createdAt DateTime @default(now())
}

model User {
    id                   String            @id @default(cuid())
    email                String?           @unique
    phone                String?
    firstName            String?
    lastName             String?
    fullName             String?
    inn                  String?
    account              String?
    correspondentAccount String?
    bic                  String?
    passport             String?
    comment              String?
    isVerified           Boolean           @default(false)
    isSubscribed         Boolean           @default(false)
    role                 Role              @default(GUEST)
    addresses            Address[]
    orders               Order[]
    favoriteProducts     FavoriteProduct[]
    tokens               Token[]
    cart                 CartProduct[]
    offers               Offer[]
    permissions          Permission[]
    createdAt            DateTime          @default(now())
    updatedAt            DateTime          @updatedAt

    @@fulltext([fullName, email, phone])
}

model Permission {
    id        String   @id @default(cuid())
    right     Right
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, right])
}

model CartProduct {
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    String
    offer     Offer    @relation(fields: [offerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    offerId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([userId, offerId])
}

model Token {
    id           String   @id @default(cuid())
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId       String
    refreshToken String
    expiresIn    DateTime
    createdAt    DateTime @default(now())
}

model Address {
    id        String   @id @default(cuid())
    country   String
    city      String
    address   String
    region    String
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id             String         @id @default(cuid())
    paymentStatus  PaymentStatus
    totalPrice     Int
    totalShiping   Int
    paid           Int            @default(0)
    mailingCountry String
    mailingCity    String
    mailingRegion  String
    mailingAddress String
    comment        String?
    products       OrderProduct[]
    fulfillments   Fulfillment[]
    timeline       Timeline[]
    user           User           @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId         String
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
}

model Timeline {
    id        String   @id @default(cuid())
    message   String
    order     Order    @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    orderId   String
    createdAt DateTime @default(now())
}

model Fulfillment {
    id               String            @id @default(cuid())
    title            String
    status           FulfillmentStatus
    tracking         String
    shippingTitle    Int
    shippingPrice    Int
    shippingDuration Int
    orderProduct     OrderProduct[]
    order            Order             @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    orderId          String
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
}

model OrderProduct {
    id            String       @id @default(cuid())
    price         Int
    order         Order        @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    orderId       String
    variant       Variant      @relation(fields: [variantId], references: [id], onUpdate: Cascade, onDelete: Restrict)
    variantId     String
    offer         Offer        @relation(fields: [offerId], references: [id], onUpdate: Cascade, onDelete: Restrict)
    offerId       String       @unique
    fulfillment   Fulfillment? @relation(fields: [fulfillmentId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    fulfillmentId String?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model FavoriteProduct {
    product   Product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId String
    user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([productId, userId])
}

model Collection {
    id              String    @id @default(cuid())
    title           String    @unique
    description     String?
    metaTitle       String?
    metaDescription String?
    handle          String    @unique
    available       Boolean   @default(false)
    products        Product[]
    images          Image[]
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    @@fulltext([title])
}

model Product {
    id               String            @id @default(cuid())
    handle           String            @unique
    title            String
    vendor           String?
    description      String?
    metaTitle        String?
    metaDescription  String?
    available        Boolean           @default(false)
    images           Image[]
    collections      Collection[]
    variants         Variant[]
    productIsFavored FavoriteProduct[]
    options          Option[]
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt

    @@fulltext([title, vendor])
    @@fulltext([vendor])
}

model Option {
    id        String        @id @default(cuid())
    title     String
    option    Int
    position  Int
    values    OptionValue[]
    product   Product       @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId String
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt

    @@unique([productId, title])
}

model OptionValue {
    id        String   @id @default(cuid())
    title     String
    option    Option   @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([optionId, title])
}

model Image {
    id           String      @id @default(cuid())
    name         String
    src          String
    alt          String
    position     Int
    product      Product?    @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    productId    String?
    collection   Collection? @relation(fields: [collectionId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    collectionId String?
    variant      Variant?    @relation(fields: [variantId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    variantId    String?
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
}

model Variant {
    id        String         @id @default(cuid())
    SKU       String?
    barcode   String?
    option0   String?
    option1   String?
    option2   String?
    product   Product        @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    productId String
    images    Image[]
    offers    Offer[]
    orders    OrderProduct[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
}

model Offer {
    id                String           @id @default(cuid())
    price             Int
    compareAtPrice    Int?
    offersPrice       Int
    status            OfferStatus      @default(OFFERED)
    variant           Variant          @relation(fields: [variantId], references: [id], onUpdate: Cascade, onDelete: Restrict)
    variantId         String
    user              User             @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    userId            String
    order             OrderProduct?
    deliveryProfile   DeliveryProfile? @relation(fields: [deliveryProfileId], references: [id], onUpdate: Cascade, onDelete: SetNull)
    deliveryProfileId String?
    cartProduct       CartProduct[]
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
}

model DeliveryProfile {
    id        String         @id @default(cuid())
    title     String
    offers    Offer[]
    zones     DeliveryZone[]
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
}

model DeliveryZone {
    id                String           @id @default(cuid())
    country           String
    region            String
    options           DeliveryOption[]
    deliveryProfile   DeliveryProfile  @relation(fields: [deliveryProfileId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    deliveryProfileId String
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt

    @@unique([deliveryProfileId, country, region])
}

model DeliveryOption {
    id             String       @id @default(cuid())
    title          String
    price          Int
    duration       Int
    deliveryZone   DeliveryZone @relation(fields: [deliveryZoneId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    deliveryZoneId String
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
}

model Country {
    id        String   @id @default(cuid())
    title     String   @unique
    regions   Region[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@fulltext([title])
}

model Region {
    id        String   @id @default(cuid())
    title     String
    cities    City[]
    country   Country  @relation(fields: [countryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    countryId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([countryId, title])
    @@fulltext([title])
}

model City {
    id        String   @id @default(cuid())
    title     String
    region    Region   @relation(fields: [regionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    regionId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([regionId, title])
    @@fulltext([title])
}
